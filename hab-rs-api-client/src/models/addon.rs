/*
 * openHAB REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Addon {
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(rename = "backgroundColor", skip_serializing_if = "Option::is_none")]
    pub background_color: Option<String>,
    #[serde(rename = "compatible", skip_serializing_if = "Option::is_none")]
    pub compatible: Option<bool>,
    #[serde(rename = "configDescriptionURI", skip_serializing_if = "Option::is_none")]
    pub config_description_uri: Option<String>,
    #[serde(rename = "connection", skip_serializing_if = "Option::is_none")]
    pub connection: Option<String>,
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(rename = "countries", skip_serializing_if = "Option::is_none")]
    pub countries: Option<Vec<String>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "detailedDescription", skip_serializing_if = "Option::is_none")]
    pub detailed_description: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "imageLink", skip_serializing_if = "Option::is_none")]
    pub image_link: Option<String>,
    #[serde(rename = "installed", skip_serializing_if = "Option::is_none")]
    pub installed: Option<bool>,
    #[serde(rename = "keywords", skip_serializing_if = "Option::is_none")]
    pub keywords: Option<String>,
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "license", skip_serializing_if = "Option::is_none")]
    pub license: Option<String>,
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
    #[serde(rename = "loggerPackages", skip_serializing_if = "Option::is_none")]
    pub logger_packages: Option<Vec<String>>,
    #[serde(rename = "maturity", skip_serializing_if = "Option::is_none")]
    pub maturity: Option<String>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    #[serde(rename = "verifiedAuthor", skip_serializing_if = "Option::is_none")]
    pub verified_author: Option<bool>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl Addon {
    pub fn new() -> Addon {
        Addon {
            author: None,
            background_color: None,
            compatible: None,
            config_description_uri: None,
            connection: None,
            content_type: None,
            countries: None,
            description: None,
            detailed_description: None,
            id: None,
            image_link: None,
            installed: None,
            keywords: None,
            label: None,
            license: None,
            link: None,
            logger_packages: None,
            maturity: None,
            properties: None,
            r#type: None,
            uid: None,
            verified_author: None,
            version: None,
        }
    }
}

