/*
 * openHAB REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WidgetDto {
    #[serde(rename = "column", skip_serializing_if = "Option::is_none")]
    pub column: Option<i32>,
    #[serde(rename = "command", skip_serializing_if = "Option::is_none")]
    pub command: Option<String>,
    #[serde(rename = "encoding", skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    #[serde(rename = "forceAsItem", skip_serializing_if = "Option::is_none")]
    pub force_as_item: Option<bool>,
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<i32>,
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    #[serde(rename = "iconcolor", skip_serializing_if = "Option::is_none")]
    pub iconcolor: Option<String>,
    #[serde(rename = "inputHint", skip_serializing_if = "Option::is_none")]
    pub input_hint: Option<String>,
    #[serde(rename = "item", skip_serializing_if = "Option::is_none")]
    pub item: Option<Box<models::EnrichedItemDto>>,
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "labelSource", skip_serializing_if = "Option::is_none")]
    pub label_source: Option<String>,
    #[serde(rename = "labelcolor", skip_serializing_if = "Option::is_none")]
    pub labelcolor: Option<String>,
    #[serde(rename = "legend", skip_serializing_if = "Option::is_none")]
    pub legend: Option<bool>,
    #[serde(rename = "linkedPage", skip_serializing_if = "Option::is_none")]
    pub linked_page: Option<Box<models::PageDto>>,
    #[serde(rename = "mappings", skip_serializing_if = "Option::is_none")]
    pub mappings: Option<Vec<models::MappingDto>>,
    #[serde(rename = "maxValue", skip_serializing_if = "Option::is_none")]
    pub max_value: Option<f64>,
    #[serde(rename = "minValue", skip_serializing_if = "Option::is_none")]
    pub min_value: Option<f64>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "pattern", skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    #[serde(rename = "period", skip_serializing_if = "Option::is_none")]
    pub period: Option<String>,
    #[serde(rename = "refresh", skip_serializing_if = "Option::is_none")]
    pub refresh: Option<i32>,
    #[serde(rename = "releaseCommand", skip_serializing_if = "Option::is_none")]
    pub release_command: Option<String>,
    #[serde(rename = "releaseOnly", skip_serializing_if = "Option::is_none")]
    pub release_only: Option<bool>,
    #[serde(rename = "row", skip_serializing_if = "Option::is_none")]
    pub row: Option<i32>,
    #[serde(rename = "service", skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "stateless", skip_serializing_if = "Option::is_none")]
    pub stateless: Option<bool>,
    #[serde(rename = "staticIcon", skip_serializing_if = "Option::is_none")]
    pub static_icon: Option<bool>,
    #[serde(rename = "step", skip_serializing_if = "Option::is_none")]
    pub step: Option<f64>,
    #[serde(rename = "switchSupport", skip_serializing_if = "Option::is_none")]
    pub switch_support: Option<bool>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "unit", skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "valuecolor", skip_serializing_if = "Option::is_none")]
    pub valuecolor: Option<String>,
    #[serde(rename = "visibility", skip_serializing_if = "Option::is_none")]
    pub visibility: Option<bool>,
    #[serde(rename = "widgetId", skip_serializing_if = "Option::is_none")]
    pub widget_id: Option<String>,
    #[serde(rename = "yAxisDecimalPattern", skip_serializing_if = "Option::is_none")]
    pub y_axis_decimal_pattern: Option<String>,
}

impl WidgetDto {
    pub fn new() -> WidgetDto {
        WidgetDto {
            column: None,
            command: None,
            encoding: None,
            force_as_item: None,
            height: None,
            icon: None,
            iconcolor: None,
            input_hint: None,
            item: None,
            label: None,
            label_source: None,
            labelcolor: None,
            legend: None,
            linked_page: None,
            mappings: None,
            max_value: None,
            min_value: None,
            name: None,
            pattern: None,
            period: None,
            refresh: None,
            release_command: None,
            release_only: None,
            row: None,
            service: None,
            state: None,
            stateless: None,
            static_icon: None,
            step: None,
            switch_support: None,
            r#type: None,
            unit: None,
            url: None,
            valuecolor: None,
            visibility: None,
            widget_id: None,
            y_axis_decimal_pattern: None,
        }
    }
}

