{
  "components": {
    "schemas": {
      "Action": {
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/Configuration"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inputs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "label": {
            "type": "string"
          },
          "typeUID": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionDTO": {
        "properties": {
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inputs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Addon": {
        "properties": {
          "author": {
            "type": "string"
          },
          "backgroundColor": {
            "type": "string"
          },
          "compatible": {
            "type": "boolean"
          },
          "configDescriptionURI": {
            "type": "string"
          },
          "connection": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "countries": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "detailedDescription": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageLink": {
            "type": "string"
          },
          "installed": {
            "type": "boolean"
          },
          "keywords": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "license": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "loggerPackages": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "maturity": {
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "verifiedAuthor": {
            "type": "boolean"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddonType": {
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AudioSinkDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AudioSourceDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChannelDTO": {
        "properties": {
          "autoUpdatePolicy": {
            "type": "string"
          },
          "channelTypeUID": {
            "type": "string"
          },
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "defaultTags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "itemType": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChannelDefinitionDTO": {
        "properties": {
          "advanced": {
            "type": "boolean"
          },
          "category": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "stateDescription": {
            "$ref": "#/components/schemas/StateDescription"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "typeUID": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChannelGroupDefinitionDTO": {
        "properties": {
          "channels": {
            "items": {
              "$ref": "#/components/schemas/ChannelDefinitionDTO"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChannelTypeDTO": {
        "properties": {
          "UID": {
            "type": "string"
          },
          "advanced": {
            "type": "boolean"
          },
          "category": {
            "type": "string"
          },
          "commandDescription": {
            "$ref": "#/components/schemas/CommandDescription"
          },
          "description": {
            "type": "string"
          },
          "itemType": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "parameterGroups": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameterGroupDTO"
            },
            "type": "array"
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameterDTO"
            },
            "type": "array"
          },
          "stateDescription": {
            "$ref": "#/components/schemas/StateDescription"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "unitHint": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommandDescription": {
        "properties": {
          "commandOptions": {
            "items": {
              "$ref": "#/components/schemas/CommandOption"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CommandOption": {
        "properties": {
          "command": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Condition": {
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/Configuration"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inputs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "label": {
            "type": "string"
          },
          "typeUID": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConditionDTO": {
        "properties": {
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inputs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigDescriptionDTO": {
        "properties": {
          "parameterGroups": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameterGroupDTO"
            },
            "type": "array"
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameterDTO"
            },
            "type": "array"
          },
          "uri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigDescriptionParameter": {
        "properties": {
          "advanced": {
            "type": "boolean"
          },
          "context": {
            "type": "string"
          },
          "default": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "filterCriteria": {
            "items": {
              "$ref": "#/components/schemas/FilterCriteria"
            },
            "type": "array"
          },
          "groupName": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "limitToOptions": {
            "type": "boolean"
          },
          "maximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "multiple": {
            "type": "boolean"
          },
          "multipleLimit": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/ParameterOption"
            },
            "type": "array"
          },
          "pattern": {
            "type": "string"
          },
          "readOnly": {
            "type": "boolean"
          },
          "required": {
            "type": "boolean"
          },
          "stepSize": {
            "type": "number"
          },
          "type": {
            "enum": [
              "TEXT",
              "INTEGER",
              "DECIMAL",
              "BOOLEAN"
            ],
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "unitLabel": {
            "type": "string"
          },
          "verifyable": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigDescriptionParameterDTO": {
        "properties": {
          "advanced": {
            "type": "boolean"
          },
          "context": {
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "filterCriteria": {
            "items": {
              "$ref": "#/components/schemas/FilterCriteriaDTO"
            },
            "type": "array"
          },
          "groupName": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "limitToOptions": {
            "type": "boolean"
          },
          "max": {
            "type": "number"
          },
          "min": {
            "type": "number"
          },
          "multiple": {
            "type": "boolean"
          },
          "multipleLimit": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/ParameterOptionDTO"
            },
            "type": "array"
          },
          "pattern": {
            "type": "string"
          },
          "readOnly": {
            "type": "boolean"
          },
          "required": {
            "type": "boolean"
          },
          "stepsize": {
            "type": "number"
          },
          "type": {
            "enum": [
              "TEXT",
              "INTEGER",
              "DECIMAL",
              "BOOLEAN"
            ],
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "unitLabel": {
            "type": "string"
          },
          "verify": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigDescriptionParameterGroupDTO": {
        "properties": {
          "advanced": {
            "type": "boolean"
          },
          "context": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigStatusMessage": {
        "properties": {
          "message": {
            "type": "string"
          },
          "parameterName": {
            "type": "string"
          },
          "statusCode": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "enum": [
              "INFORMATION",
              "WARNING",
              "ERROR",
              "PENDING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigurableServiceDTO": {
        "properties": {
          "category": {
            "type": "string"
          },
          "configDescriptionURI": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "multiple": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Configuration": {
        "properties": {
          "properties": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "DimensionInfo": {
        "properties": {
          "dimension": {
            "type": "string"
          },
          "systemUnit": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiscoveryInfoDTO": {
        "properties": {
          "inputDescription": {
            "type": "string"
          },
          "inputLabel": {
            "type": "string"
          },
          "inputSupported": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DiscoveryResultDTO": {
        "properties": {
          "bridgeUID": {
            "type": "string"
          },
          "flag": {
            "enum": [
              "NEW",
              "IGNORED"
            ],
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "representationProperty": {
            "type": "string"
          },
          "thingTypeUID": {
            "type": "string"
          },
          "thingUID": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnrichedChannelDTO": {
        "properties": {
          "autoUpdatePolicy": {
            "type": "string"
          },
          "channelTypeUID": {
            "type": "string"
          },
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "defaultTags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "itemType": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "linkedItems": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnrichedItemChannelLinkDTO": {
        "properties": {
          "channelUID": {
            "type": "string"
          },
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "editable": {
            "type": "boolean"
          },
          "itemName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnrichedItemDTO": {
        "properties": {
          "category": {
            "type": "string"
          },
          "commandDescription": {
            "$ref": "#/components/schemas/CommandDescription"
          },
          "editable": {
            "type": "boolean"
          },
          "groupNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "label": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "stateDescription": {
            "$ref": "#/components/schemas/StateDescription"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "transformedState": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "unitSymbol": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnrichedRuleDTO": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/ActionDTO"
            },
            "type": "array"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/ConditionDTO"
            },
            "type": "array"
          },
          "configDescriptions": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameterDTO"
            },
            "type": "array"
          },
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RuleStatusInfo"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "templateUID": {
            "type": "string"
          },
          "triggers": {
            "items": {
              "$ref": "#/components/schemas/TriggerDTO"
            },
            "type": "array"
          },
          "uid": {
            "type": "string"
          },
          "visibility": {
            "enum": [
              "VISIBLE",
              "HIDDEN",
              "EXPERT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnrichedSemanticTagDTO": {
        "type": "object"
      },
      "EnrichedThingDTO": {
        "properties": {
          "UID": {
            "type": "string"
          },
          "bridgeUID": {
            "type": "string"
          },
          "channels": {
            "items": {
              "$ref": "#/components/schemas/EnrichedChannelDTO"
            },
            "type": "array"
          },
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "editable": {
            "type": "boolean"
          },
          "firmwareStatus": {
            "$ref": "#/components/schemas/FirmwareStatusDTO"
          },
          "label": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "statusInfo": {
            "$ref": "#/components/schemas/ThingStatusInfo"
          },
          "thingTypeUID": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FilterCriteria": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FilterCriteriaDTO": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FirmwareDTO": {
        "properties": {
          "changelog": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "modelRestricted": {
            "type": "boolean"
          },
          "prerequisiteVersion": {
            "type": "string"
          },
          "thingTypeUID": {
            "type": "string"
          },
          "vendor": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FirmwareStatusDTO": {
        "properties": {
          "status": {
            "type": "string"
          },
          "updatableVersion": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GalleryItem": {
        "properties": {
          "author": {
            "type": "string"
          },
          "authorAvatarUrl": {
            "type": "string"
          },
          "authorName": {
            "type": "string"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "likes": {
            "format": "int32",
            "type": "integer"
          },
          "posts": {
            "format": "int32",
            "type": "integer"
          },
          "readme": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updatedDate": {
            "format": "date-time",
            "type": "string"
          },
          "views": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GalleryWidgetsListItem": {
        "properties": {
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "likes": {
            "format": "int32",
            "type": "integer"
          },
          "posts": {
            "format": "int32",
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "views": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GroupFunctionDTO": {
        "properties": {
          "name": {
            "type": "string"
          },
          "params": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GroupItemDTO": {
        "properties": {
          "category": {
            "type": "string"
          },
          "function": {
            "$ref": "#/components/schemas/GroupFunctionDTO"
          },
          "groupNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "groupType": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HistoryDataBean": {
        "properties": {
          "state": {
            "type": "string"
          },
          "time": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HumanLanguageInterpreterDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "locales": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "IconSet": {
        "properties": {
          "description": {
            "type": "string"
          },
          "formats": {
            "items": {
              "enum": [
                "PNG",
                "SVG"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Input": {
        "properties": {
          "defaultValue": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ItemChannelLinkDTO": {
        "properties": {
          "channelUID": {
            "type": "string"
          },
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "itemName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ItemHistoryDTO": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/HistoryDataBean"
            },
            "type": "array"
          },
          "datapoints": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "totalrecords": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Links": {
        "properties": {
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LoggerBean": {
        "properties": {
          "loggers": {
            "items": {
              "$ref": "#/components/schemas/LoggerInfo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LoggerInfo": {
        "properties": {
          "level": {
            "type": "string"
          },
          "loggerName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MappingDTO": {
        "properties": {
          "column": {
            "format": "int32",
            "type": "integer"
          },
          "command": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "releaseCommand": {
            "type": "string"
          },
          "row": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MetadataDTO": {
        "properties": {
          "config": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Module": {
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/Configuration"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "typeUID": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ModuleDTO": {
        "properties": {
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ModuleTypeDTO": {
        "properties": {
          "configDescriptions": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameterDTO"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "uid": {
            "type": "string"
          },
          "visibility": {
            "enum": [
              "VISIBLE",
              "HIDDEN",
              "EXPERT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Output": {
        "properties": {
          "defaultValue": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PageDTO": {
        "properties": {
          "icon": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "leaf": {
            "type": "boolean"
          },
          "link": {
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/PageDTO"
          },
          "timeout": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "widgets": {
            "items": {
              "$ref": "#/components/schemas/WidgetDTO"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ParameterOption": {
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ParameterOptionDTO": {
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PersistenceCronStrategyDTO": {
        "properties": {
          "cronExpression": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PersistenceFilterDTO": {
        "properties": {
          "inverted": {
            "type": "boolean"
          },
          "lower": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "relative": {
            "type": "boolean"
          },
          "unit": {
            "type": "string"
          },
          "upper": {
            "type": "number"
          },
          "value": {
            "type": "number"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PersistenceItemConfigurationDTO": {
        "properties": {
          "alias": {
            "type": "string"
          },
          "filters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "items": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "strategies": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PersistenceItemInfo": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "earliest": {
            "format": "date-time",
            "type": "string"
          },
          "latest": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PersistenceServiceConfigurationDTO": {
        "properties": {
          "configs": {
            "items": {
              "$ref": "#/components/schemas/PersistenceItemConfigurationDTO"
            },
            "type": "array"
          },
          "cronStrategies": {
            "items": {
              "$ref": "#/components/schemas/PersistenceCronStrategyDTO"
            },
            "type": "array"
          },
          "defaults": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "editable": {
            "type": "boolean"
          },
          "equalsFilters": {
            "items": {
              "$ref": "#/components/schemas/PersistenceFilterDTO"
            },
            "type": "array"
          },
          "includeFilters": {
            "items": {
              "$ref": "#/components/schemas/PersistenceFilterDTO"
            },
            "type": "array"
          },
          "serviceId": {
            "type": "string"
          },
          "thresholdFilters": {
            "items": {
              "$ref": "#/components/schemas/PersistenceFilterDTO"
            },
            "type": "array"
          },
          "timeFilters": {
            "items": {
              "$ref": "#/components/schemas/PersistenceFilterDTO"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PersistenceServiceDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProfileTypeDTO": {
        "properties": {
          "kind": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "supportedItemTypes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RootBean": {
        "properties": {
          "links": {
            "items": {
              "$ref": "#/components/schemas/Links"
            },
            "type": "array"
          },
          "locale": {
            "type": "string"
          },
          "measurementSystem": {
            "type": "string"
          },
          "runtimeInfo": {
            "$ref": "#/components/schemas/RuntimeInfo"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RootUIComponent": {
        "properties": {
          "component": {
            "type": "string"
          },
          "config": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "props": {
            "$ref": "#/components/schemas/ConfigDescriptionDTO"
          },
          "slots": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/UIComponent"
              },
              "type": "array"
            },
            "type": "object"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Rule": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/Action"
            },
            "type": "array"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/Condition"
            },
            "type": "array"
          },
          "configuration": {
            "$ref": "#/components/schemas/Configuration"
          },
          "configurationDescriptions": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameter"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "modules": {
            "items": {
              "$ref": "#/components/schemas/Module"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "templateUID": {
            "type": "string"
          },
          "triggers": {
            "items": {
              "$ref": "#/components/schemas/Trigger"
            },
            "type": "array"
          },
          "uid": {
            "type": "string"
          },
          "visibility": {
            "enum": [
              "VISIBLE",
              "HIDDEN",
              "EXPERT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuleDTO": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/ActionDTO"
            },
            "type": "array"
          },
          "conditions": {
            "items": {
              "$ref": "#/components/schemas/ConditionDTO"
            },
            "type": "array"
          },
          "configDescriptions": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameterDTO"
            },
            "type": "array"
          },
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "templateUID": {
            "type": "string"
          },
          "triggers": {
            "items": {
              "$ref": "#/components/schemas/TriggerDTO"
            },
            "type": "array"
          },
          "uid": {
            "type": "string"
          },
          "visibility": {
            "enum": [
              "VISIBLE",
              "HIDDEN",
              "EXPERT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuleExecution": {
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/Rule"
          }
        },
        "type": "object"
      },
      "RuleStatusInfo": {
        "properties": {
          "description": {
            "type": "string"
          },
          "status": {
            "enum": [
              "UNINITIALIZED",
              "INITIALIZING",
              "IDLE",
              "RUNNING"
            ],
            "type": "string"
          },
          "statusDetail": {
            "enum": [
              "NONE",
              "HANDLER_MISSING_ERROR",
              "HANDLER_INITIALIZING_ERROR",
              "CONFIGURATION_ERROR",
              "TEMPLATE_MISSING_ERROR",
              "INVALID_RULE",
              "DISABLED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuntimeInfo": {
        "properties": {
          "buildString": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SitemapDTO": {
        "properties": {
          "homepage": {
            "$ref": "#/components/schemas/PageDTO"
          },
          "icon": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "StateDescription": {
        "properties": {
          "maximum": {
            "type": "number"
          },
          "minimum": {
            "type": "number"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/StateOption"
            },
            "type": "array"
          },
          "pattern": {
            "type": "string"
          },
          "readOnly": {
            "type": "boolean"
          },
          "step": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "StateOption": {
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "StrippedThingTypeDTO": {
        "properties": {
          "UID": {
            "type": "string"
          },
          "bridge": {
            "type": "boolean"
          },
          "category": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "listed": {
            "type": "boolean"
          },
          "supportedBridgeTypeUIDs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SystemInfo": {
        "properties": {
          "availableProcessors": {
            "format": "int32",
            "type": "integer"
          },
          "configFolder": {
            "type": "string"
          },
          "freeMemory": {
            "format": "int64",
            "type": "integer"
          },
          "javaVendor": {
            "type": "string"
          },
          "javaVendorVersion": {
            "type": "string"
          },
          "javaVersion": {
            "type": "string"
          },
          "logFolder": {
            "type": "string"
          },
          "osArchitecture": {
            "type": "string"
          },
          "osName": {
            "type": "string"
          },
          "osVersion": {
            "type": "string"
          },
          "startLevel": {
            "format": "int32",
            "type": "integer"
          },
          "totalMemory": {
            "format": "int64",
            "type": "integer"
          },
          "uptime": {
            "format": "int64",
            "type": "integer"
          },
          "userdataFolder": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SystemInfoBean": {
        "properties": {
          "systemInfo": {
            "$ref": "#/components/schemas/SystemInfo"
          }
        },
        "type": "object"
      },
      "Template": {
        "properties": {
          "description": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "uid": {
            "type": "string"
          },
          "visibility": {
            "enum": [
              "VISIBLE",
              "HIDDEN",
              "EXPERT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThingActionDTO": {
        "properties": {
          "actionUid": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "inputConfigDescriptions": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameterDTO"
            },
            "type": "array"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/Input"
            },
            "type": "array"
          },
          "label": {
            "type": "string"
          },
          "outputs": {
            "items": {
              "$ref": "#/components/schemas/Output"
            },
            "type": "array"
          },
          "visibility": {
            "enum": [
              "VISIBLE",
              "HIDDEN",
              "EXPERT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThingDTO": {
        "properties": {
          "UID": {
            "type": "string"
          },
          "bridgeUID": {
            "type": "string"
          },
          "channels": {
            "items": {
              "$ref": "#/components/schemas/ChannelDTO"
            },
            "type": "array"
          },
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "label": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "thingTypeUID": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThingStatusInfo": {
        "properties": {
          "description": {
            "type": "string"
          },
          "status": {
            "enum": [
              "UNINITIALIZED",
              "INITIALIZING",
              "UNKNOWN",
              "ONLINE",
              "OFFLINE",
              "REMOVING",
              "REMOVED"
            ],
            "type": "string"
          },
          "statusDetail": {
            "enum": [
              "NONE",
              "NOT_YET_READY",
              "HANDLER_MISSING_ERROR",
              "HANDLER_REGISTERING_ERROR",
              "HANDLER_INITIALIZING_ERROR",
              "HANDLER_CONFIGURATION_PENDING",
              "CONFIGURATION_PENDING",
              "COMMUNICATION_ERROR",
              "CONFIGURATION_ERROR",
              "BRIDGE_OFFLINE",
              "FIRMWARE_UPDATING",
              "DUTY_CYCLE",
              "BRIDGE_UNINITIALIZED",
              "GONE",
              "DISABLED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThingTypeDTO": {
        "properties": {
          "UID": {
            "type": "string"
          },
          "bridge": {
            "type": "boolean"
          },
          "category": {
            "type": "string"
          },
          "channelGroups": {
            "items": {
              "$ref": "#/components/schemas/ChannelGroupDefinitionDTO"
            },
            "type": "array"
          },
          "channels": {
            "items": {
              "$ref": "#/components/schemas/ChannelDefinitionDTO"
            },
            "type": "array"
          },
          "configParameters": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameterDTO"
            },
            "type": "array"
          },
          "description": {
            "type": "string"
          },
          "extensibleChannelTypeIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "label": {
            "type": "string"
          },
          "listed": {
            "type": "boolean"
          },
          "parameterGroups": {
            "items": {
              "$ref": "#/components/schemas/ConfigDescriptionParameterGroupDTO"
            },
            "type": "array"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "supportedBridgeTypeUIDs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TileDTO": {
        "properties": {
          "imageUrl": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "overlay": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenResponseDTO": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "expires_in": {
            "format": "int32",
            "type": "integer"
          },
          "refresh_token": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserDTO"
          }
        },
        "type": "object"
      },
      "Transformation": {
        "properties": {
          "configuration": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransformationDTO": {
        "properties": {
          "configuration": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "editable": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Trigger": {
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/Configuration"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "typeUID": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TriggerDTO": {
        "properties": {
          "configuration": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UIComponent": {
        "properties": {
          "component": {
            "type": "string"
          },
          "config": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UoMInfo": {
        "properties": {
          "dimensions": {
            "items": {
              "$ref": "#/components/schemas/DimensionInfo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UoMInfoBean": {
        "properties": {
          "uomInfo": {
            "$ref": "#/components/schemas/UoMInfo"
          }
        },
        "type": "object"
      },
      "UserApiTokenDTO": {
        "properties": {
          "createdTime": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserDTO": {
        "properties": {
          "name": {
            "type": "string"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UserSessionDTO": {
        "properties": {
          "clientId": {
            "type": "string"
          },
          "createdTime": {
            "format": "date-time",
            "type": "string"
          },
          "lastRefreshTime": {
            "format": "date-time",
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VoiceDTO": {
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "WidgetDTO": {
        "properties": {
          "column": {
            "format": "int32",
            "type": "integer"
          },
          "command": {
            "type": "string"
          },
          "encoding": {
            "type": "string"
          },
          "forceAsItem": {
            "type": "boolean"
          },
          "height": {
            "format": "int32",
            "type": "integer"
          },
          "icon": {
            "type": "string"
          },
          "iconcolor": {
            "type": "string"
          },
          "inputHint": {
            "type": "string"
          },
          "item": {
            "$ref": "#/components/schemas/EnrichedItemDTO"
          },
          "label": {
            "type": "string"
          },
          "labelSource": {
            "type": "string"
          },
          "labelcolor": {
            "type": "string"
          },
          "legend": {
            "type": "boolean"
          },
          "linkedPage": {
            "$ref": "#/components/schemas/PageDTO"
          },
          "mappings": {
            "items": {
              "$ref": "#/components/schemas/MappingDTO"
            },
            "type": "array"
          },
          "maxValue": {
            "type": "number"
          },
          "minValue": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "period": {
            "type": "string"
          },
          "refresh": {
            "format": "int32",
            "type": "integer"
          },
          "releaseCommand": {
            "type": "string"
          },
          "releaseOnly": {
            "type": "boolean"
          },
          "row": {
            "format": "int32",
            "type": "integer"
          },
          "service": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "stateless": {
            "type": "boolean"
          },
          "staticIcon": {
            "type": "boolean"
          },
          "step": {
            "type": "number"
          },
          "switchSupport": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "valuecolor": {
            "type": "string"
          },
          "visibility": {
            "type": "boolean"
          },
          "widgetId": {
            "type": "string"
          },
          "yAxisDecimalPattern": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      },
      "oauth2": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/auth/authorize",
            "scopes": {
              "admin": "Administration operations"
            },
            "tokenUrl": "/rest/auth/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "contact": {
      "name": "openHAB",
      "url": "https://www.openhab.org/docs/"
    },
    "title": "openHAB REST API",
    "version": "8"
  },
  "openapi": "3.0.1",
  "paths": {
    "/": {
      "get": {
        "operationId": "getRoot",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootBean"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Gets information about the runtime, the API version and links to resources.",
        "tags": [
          "root"
        ]
      }
    },
    "/actions/{thingUID}": {
      "get": {
        "operationId": "getAvailableActionsForThing",
        "parameters": [
          {
            "description": "thingUID",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ThingActionDTO"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "No actions found."
          }
        },
        "summary": "Get all available actions for provided thing UID",
        "tags": [
          "actions"
        ]
      }
    },
    "/actions/{thingUID}/{actionUid}": {
      "post": {
        "operationId": "executeThingAction",
        "parameters": [
          {
            "description": "thingUID",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "action type UID (including scope, separated by '.')",
            "in": "path",
            "name": "actionUid",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9]+(\\-[a-zA-Z0-9]+)?\\.[a-zA-Z0-9]+(%23[A-Fa-f0-9]+)?",
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "object"
                },
                "type": "object"
              }
            }
          },
          "description": "action inputs as map (parameter name as key / argument as value)"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Action not found"
          },
          "500": {
            "description": "Creation of action handler or execution failed"
          }
        },
        "summary": "Executes a thing action.",
        "tags": [
          "actions"
        ]
      }
    },
    "/addons": {
      "get": {
        "operationId": "getAddons",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "service ID",
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Addon"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Service not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get all add-ons.",
        "tags": [
          "addons"
        ]
      }
    },
    "/addons/services": {
      "get": {
        "operationId": "getAddonTypes",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AddonType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get all add-on types.",
        "tags": [
          "addons"
        ]
      }
    },
    "/addons/suggestions": {
      "get": {
        "operationId": "getSuggestedAddons",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Addon"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get suggested add-ons to be installed.",
        "tags": [
          "addons"
        ]
      }
    },
    "/addons/types": {
      "get": {
        "operationId": "getAddonServices",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "service ID",
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AddonType"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Service not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get add-on services.",
        "tags": [
          "addons"
        ]
      }
    },
    "/addons/url/{url}/install": {
      "post": {
        "operationId": "installAddonFromURL",
        "parameters": [
          {
            "description": "addon install URL",
            "in": "path",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "The given URL is malformed or not valid."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Installs the add-on from the given URL.",
        "tags": [
          "addons"
        ]
      }
    },
    "/addons/{addonId}": {
      "get": {
        "operationId": "getAddonById",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "addon ID",
            "in": "path",
            "name": "addonId",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9-:]+",
              "type": "string"
            }
          },
          {
            "description": "service ID",
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get add-on with given ID.",
        "tags": [
          "addons"
        ]
      }
    },
    "/addons/{addonId}/config": {
      "get": {
        "operationId": "getAddonConfiguration",
        "parameters": [
          {
            "description": "addon ID",
            "in": "path",
            "name": "addonId",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9-:]+",
              "type": "string"
            }
          },
          {
            "description": "service ID",
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Add-on does not exist"
          },
          "500": {
            "description": "Configuration can not be read due to internal error"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get add-on configuration for given add-on ID.",
        "tags": [
          "addons"
        ]
      },
      "put": {
        "operationId": "updateAddonConfiguration",
        "parameters": [
          {
            "description": "Add-on id",
            "in": "path",
            "name": "addonId",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9-:]+",
              "type": "string"
            }
          },
          {
            "description": "service ID",
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "object"
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "No old configuration"
          },
          "404": {
            "description": "Add-on does not exist"
          },
          "500": {
            "description": "Configuration can not be updated due to internal error"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Updates an add-on configuration for given ID and returns the old configuration.",
        "tags": [
          "addons"
        ]
      }
    },
    "/addons/{addonId}/install": {
      "post": {
        "operationId": "installAddonById",
        "parameters": [
          {
            "description": "addon ID",
            "in": "path",
            "name": "addonId",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9-:]+",
              "type": "string"
            }
          },
          {
            "description": "service ID",
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Installs the add-on with the given ID.",
        "tags": [
          "addons"
        ]
      }
    },
    "/addons/{addonId}/uninstall": {
      "post": {
        "operationId": "uninstallAddon",
        "parameters": [
          {
            "description": "addon ID",
            "in": "path",
            "name": "addonId",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9-:]+",
              "type": "string"
            }
          },
          {
            "description": "service ID",
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Uninstalls the add-on with the given ID.",
        "tags": [
          "addons"
        ]
      }
    },
    "/audio/defaultsink": {
      "get": {
        "operationId": "getAudioDefaultSink",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudioSinkDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Sink not found"
          }
        },
        "summary": "Get the default sink if defined or the first available sink.",
        "tags": [
          "audio"
        ]
      }
    },
    "/audio/defaultsource": {
      "get": {
        "operationId": "getAudioDefaultSource",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AudioSourceDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Source not found"
          }
        },
        "summary": "Get the default source if defined or the first available source.",
        "tags": [
          "audio"
        ]
      }
    },
    "/audio/sinks": {
      "get": {
        "operationId": "getAudioSinks",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AudioSinkDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get the list of all sinks.",
        "tags": [
          "audio"
        ]
      }
    },
    "/audio/sources": {
      "get": {
        "operationId": "getAudioSources",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AudioSourceDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get the list of all sources.",
        "tags": [
          "audio"
        ]
      }
    },
    "/auth/apitokens": {
      "get": {
        "operationId": "getApiTokens",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserApiTokenDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "User is not authenticated"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "List the API tokens associated to the authenticated user.",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/apitokens/{name}": {
      "delete": {
        "operationId": "removeApiToken",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "User is not authenticated"
          },
          "404": {
            "description": "User or API token not found"
          }
        },
        "summary": "Revoke a specified API token associated to the authenticated user.",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "deleteSession",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "refresh_token": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "User is not authenticated"
          },
          "404": {
            "description": "User or refresh token not found"
          }
        },
        "summary": "Delete the session associated with a refresh token.",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/sessions": {
      "get": {
        "operationId": "getSessionsForCurrentUser",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserSessionDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "User is not authenticated"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "List the sessions associated to the authenticated user.",
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/token": {
      "post": {
        "operationId": "getOAuthToken",
        "parameters": [
          {
            "in": "query",
            "name": "useCookie",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "client_id": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  },
                  "code_verifier": {
                    "type": "string"
                  },
                  "grant_type": {
                    "type": "string"
                  },
                  "redirect_uri": {
                    "type": "string"
                  },
                  "refresh_token": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponseDTO"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Invalid request parameters"
          }
        },
        "summary": "Get access and refresh tokens.",
        "tags": [
          "auth"
        ]
      }
    },
    "/channel-types": {
      "get": {
        "operationId": "getChannelTypes",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter UIDs by prefix (multiple comma-separated prefixes allowed, for example: 'system,mqtt')",
            "in": "query",
            "name": "prefixes",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ChannelTypeDTO"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets all available channel types.",
        "tags": [
          "channel-types"
        ]
      }
    },
    "/channel-types/{channelTypeUID}": {
      "get": {
        "operationId": "getChannelTypeByUID",
        "parameters": [
          {
            "description": "channelTypeUID",
            "in": "path",
            "name": "channelTypeUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTypeDTO"
                }
              }
            },
            "description": "Channel type with provided channelTypeUID does not exist."
          },
          "404": {
            "description": "No content"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets channel type by UID.",
        "tags": [
          "channel-types"
        ]
      }
    },
    "/channel-types/{channelTypeUID}/linkableItemTypes": {
      "get": {
        "operationId": "getLinkableItemTypesByChannelTypeUID",
        "parameters": [
          {
            "description": "channelTypeUID",
            "in": "path",
            "name": "channelTypeUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "No content: channel type has no linkable items or is no trigger channel."
          },
          "404": {
            "description": "Given channel type UID not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets the item types the given trigger channel type UID can be linked to.",
        "tags": [
          "channel-types"
        ]
      }
    },
    "/config-descriptions": {
      "get": {
        "operationId": "getConfigDescriptions",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "scheme filter",
            "in": "query",
            "name": "scheme",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConfigDescriptionDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets all available config descriptions.",
        "tags": [
          "config-descriptions"
        ]
      }
    },
    "/config-descriptions/{uri}": {
      "get": {
        "operationId": "getConfigDescriptionByURI",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "uri",
            "in": "path",
            "name": "uri",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigDescriptionDTO"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Invalid URI syntax"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets a config description by URI.",
        "tags": [
          "config-descriptions"
        ]
      }
    },
    "/discovery": {
      "get": {
        "operationId": "getBindingsWithDiscoverySupport",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets all bindings that support discovery.",
        "tags": [
          "discovery"
        ]
      }
    },
    "/discovery/bindings/{bindingId}/info": {
      "get": {
        "operationId": "getDiscoveryServicesInfo",
        "parameters": [
          {
            "description": "binding Id",
            "in": "path",
            "name": "bindingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryInfoDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Discovery service not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets information about the discovery services for a binding.",
        "tags": [
          "discovery"
        ]
      }
    },
    "/discovery/bindings/{bindingId}/scan": {
      "post": {
        "operationId": "scan",
        "parameters": [
          {
            "description": "binding Id",
            "in": "path",
            "name": "bindingId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "input parameter to start the discovery",
            "in": "query",
            "name": "input",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Discovery service not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Starts asynchronous discovery process for a binding and returns the timeout in seconds of the discovery operation.",
        "tags": [
          "discovery"
        ]
      }
    },
    "/events": {
      "get": {
        "operationId": "getEvents",
        "parameters": [
          {
            "description": "topics",
            "in": "query",
            "name": "topics",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Topic is empty or contains invalid characters"
          }
        },
        "summary": "Get all events.",
        "tags": [
          "events"
        ]
      }
    },
    "/events/states": {
      "get": {
        "operationId": "initNewStateTacker",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Initiates a new item state tracker connection",
        "tags": [
          "events"
        ]
      }
    },
    "/events/states/{connectionId}": {
      "post": {
        "operationId": "updateItemListForStateUpdates",
        "parameters": [
          {
            "in": "path",
            "name": "connectionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              }
            }
          },
          "description": "items"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Unknown connectionId"
          }
        },
        "summary": "Changes the list of items a SSE connection will receive state updates to.",
        "tags": [
          "events"
        ]
      }
    },
    "/habpanel/gallery/{galleryName}/widgets": {
      "get": {
        "operationId": "getGalleryWidgetList",
        "parameters": [
          {
            "description": "gallery name e.g. 'community'",
            "in": "path",
            "name": "galleryName",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]*",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GalleryWidgetsListItem"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Unknown gallery"
          }
        },
        "summary": "Gets the list of widget gallery items.",
        "tags": [
          "habpanel"
        ]
      }
    },
    "/habpanel/gallery/{galleryName}/widgets/{id}": {
      "get": {
        "operationId": "getGalleryWidgetsItem",
        "parameters": [
          {
            "description": "gallery name e.g. 'community'",
            "in": "path",
            "name": "galleryName",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]*",
              "type": "string"
            }
          },
          {
            "description": "id within the gallery",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]*",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GalleryItem"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Unknown gallery or gallery item not found"
          }
        },
        "summary": "Gets the details about a widget gallery item.",
        "tags": [
          "habpanel"
        ]
      }
    },
    "/iconsets": {
      "get": {
        "operationId": "getIconSets",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IconSet"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Gets all icon sets.",
        "tags": [
          "iconsets"
        ]
      }
    },
    "/inbox": {
      "get": {
        "operationId": "getDiscoveredInboxItems",
        "parameters": [
          {
            "description": "If true, include ignored inbox entries. Defaults to true",
            "in": "query",
            "name": "includeIgnored",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DiscoveryResultDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get all discovered things.",
        "tags": [
          "inbox"
        ]
      }
    },
    "/inbox/{thingUID}": {
      "delete": {
        "operationId": "removeItemFromInbox",
        "parameters": [
          {
            "description": "thingUID",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Discovery result not found in the inbox."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Removes the discovery result from the inbox.",
        "tags": [
          "inbox"
        ]
      }
    },
    "/inbox/{thingUID}/approve": {
      "post": {
        "operationId": "approveInboxItemById",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "thingUID",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "new thing ID",
            "in": "query",
            "name": "newThingId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "thing label"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid new thing ID."
          },
          "404": {
            "description": "Thing unable to be approved."
          },
          "409": {
            "description": "No binding found that supports this thing."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Approves the discovery result by adding the thing to the registry.",
        "tags": [
          "inbox"
        ]
      }
    },
    "/inbox/{thingUID}/ignore": {
      "post": {
        "operationId": "flagInboxItemAsIgnored",
        "parameters": [
          {
            "description": "thingUID",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Flags a discovery result as ignored for further processing.",
        "tags": [
          "inbox"
        ]
      }
    },
    "/inbox/{thingUID}/unignore": {
      "post": {
        "operationId": "removeIgnoreFlagOnInboxItem",
        "parameters": [
          {
            "description": "thingUID",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Removes ignore flag from a discovery result.",
        "tags": [
          "inbox"
        ]
      }
    },
    "/items": {
      "get": {
        "operationId": "getItems",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "item type filter",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "item tag filter",
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "metadata selector - a comma separated list or a regular expression (returns all if no value given)",
            "in": "query",
            "name": "metadata",
            "schema": {
              "default": ".*",
              "type": "string"
            }
          },
          {
            "description": "get member items recursively",
            "in": "query",
            "name": "recursive",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "limit output to the given fields (comma separated)",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "provides a cacheable list of values not expected to change regularly and checks the If-Modified-Since header, all other parameters are ignored except \"metadata\"",
            "in": "query",
            "name": "staticDataOnly",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnrichedItemDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get all available items.",
        "tags": [
          "items"
        ]
      },
      "put": {
        "operationId": "addOrUpdateItemsInRegistry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/GroupItemDTO"
                },
                "type": "array"
              }
            }
          },
          "description": "array of item data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Payload is invalid."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Adds a list of items to the registry or updates the existing items.",
        "tags": [
          "items"
        ]
      }
    },
    "/items/metadata/purge": {
      "post": {
        "operationId": "purgeDatabase",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Remove unused/orphaned metadata.",
        "tags": [
          "items"
        ]
      }
    },
    "/items/{itemName}/members/{memberItemName}": {
      "delete": {
        "operationId": "removeMemberFromGroupItem",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemName",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "member item name",
            "in": "path",
            "name": "memberItemName",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item or member item not found or item is not of type group item."
          },
          "405": {
            "description": "Member item is not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Removes an existing member from a group item.",
        "tags": [
          "items"
        ]
      },
      "put": {
        "operationId": "addMemberToGroupItem",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemName",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "member item name",
            "in": "path",
            "name": "memberItemName",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item or member item not found or item is not of type group item."
          },
          "405": {
            "description": "Member item is not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Adds a new member to a group item.",
        "tags": [
          "items"
        ]
      }
    },
    "/items/{itemName}/semantic/{semanticClass}": {
      "get": {
        "operationId": "getSemanticItem",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "item name",
            "in": "path",
            "name": "itemName",
            "required": true,
            "schema": {
              "pattern": "\\w+",
              "type": "string"
            }
          },
          {
            "description": "semantic class",
            "in": "path",
            "name": "semanticClass",
            "required": true,
            "schema": {
              "pattern": "\\w+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "summary": "Gets the item which defines the requested semantics of an item.",
        "tags": [
          "items"
        ]
      }
    },
    "/items/{itemname}": {
      "delete": {
        "operationId": "removeItemFromRegistry",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found or item is not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Removes an item from the registry.",
        "tags": [
          "items"
        ]
      },
      "get": {
        "operationId": "getItemByName",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "metadata selector - a comma separated list or a regular expression (returns all if no value given)",
            "in": "query",
            "name": "metadata",
            "schema": {
              "default": ".*",
              "type": "string"
            }
          },
          {
            "description": "get member items if the item is a group item",
            "in": "query",
            "name": "recursive",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedItemDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "summary": "Gets a single item.",
        "tags": [
          "items"
        ]
      },
      "post": {
        "operationId": "sendItemCommand",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "valid item command (e.g. ON, OFF, UP, DOWN, REFRESH)",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Item command null"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "summary": "Sends a command to an item.",
        "tags": [
          "items"
        ]
      },
      "put": {
        "operationId": "addOrUpdateItemInRegistry",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupItemDTO"
              }
            }
          },
          "description": "item data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedItemDTO"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "description": "Item created."
          },
          "400": {
            "description": "Payload invalid."
          },
          "404": {
            "description": "Item not found or name in path invalid."
          },
          "405": {
            "description": "Item not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Adds a new item to the registry or updates the existing item.",
        "tags": [
          "items"
        ]
      }
    },
    "/items/{itemname}/metadata/namespaces": {
      "get": {
        "operationId": "getItemNamespaces",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "summary": "Gets the namespace of an item.",
        "tags": [
          "items"
        ]
      }
    },
    "/items/{itemname}/metadata/{namespace}": {
      "delete": {
        "operationId": "removeMetadataFromItem",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          },
          "405": {
            "description": "Meta data not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Removes metadata from an item.",
        "tags": [
          "items"
        ]
      },
      "put": {
        "operationId": "addMetadataToItem",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataDTO"
              }
            }
          },
          "description": "metadata",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Metadata value empty."
          },
          "404": {
            "description": "Item not found."
          },
          "405": {
            "description": "Metadata not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Adds metadata to an item.",
        "tags": [
          "items"
        ]
      }
    },
    "/items/{itemname}/state": {
      "get": {
        "operationId": "getItemState_1",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "summary": "Gets the state of an item.",
        "tags": [
          "items"
        ]
      },
      "put": {
        "operationId": "updateItemState",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "valid item state (e.g. ON, OFF)",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Item state null"
          },
          "404": {
            "description": "Item not found"
          }
        },
        "summary": "Updates the state of an item.",
        "tags": [
          "items"
        ]
      }
    },
    "/items/{itemname}/tags/{tag}": {
      "delete": {
        "operationId": "removeTagFromItem",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "tag",
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          },
          "405": {
            "description": "Item not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Removes a tag from an item.",
        "tags": [
          "items"
        ]
      },
      "put": {
        "operationId": "addTagToItem",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "tag",
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Item not found."
          },
          "405": {
            "description": "Item not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Adds a tag to an item.",
        "tags": [
          "items"
        ]
      }
    },
    "/links": {
      "get": {
        "operationId": "getItemLinks",
        "parameters": [
          {
            "description": "filter by channel UID",
            "in": "query",
            "name": "channelUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by item name",
            "in": "query",
            "name": "itemName",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnrichedItemChannelLinkDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets all available links.",
        "tags": [
          "links"
        ]
      }
    },
    "/links/orphans": {
      "get": {
        "operationId": "getOrphanLinks",
        "responses": {
          "200": {
            "description": "List of broken links"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get orphan links between items and broken/non-existent thing channels",
        "tags": [
          "links"
        ]
      }
    },
    "/links/purge": {
      "post": {
        "operationId": "purgeDatabase_1",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Remove unused/orphaned links.",
        "tags": [
          "links"
        ]
      }
    },
    "/links/{itemName}/{channelUID}": {
      "delete": {
        "operationId": "unlinkItemFromChannel",
        "parameters": [
          {
            "description": "itemName",
            "in": "path",
            "name": "itemName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "channelUID",
            "in": "path",
            "name": "channelUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Link not found."
          },
          "405": {
            "description": "Link not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Unlinks an item from a channel.",
        "tags": [
          "links"
        ]
      },
      "get": {
        "operationId": "getItemLink",
        "parameters": [
          {
            "description": "item name",
            "in": "path",
            "name": "itemName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "channel UID",
            "in": "path",
            "name": "channelUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedItemChannelLinkDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Content does not match the path"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Retrieves an individual link.",
        "tags": [
          "links"
        ]
      },
      "put": {
        "operationId": "linkItemToChannel",
        "parameters": [
          {
            "description": "itemName",
            "in": "path",
            "name": "itemName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "channelUID",
            "in": "path",
            "name": "channelUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemChannelLinkDTO"
              }
            }
          },
          "description": "link data"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Content does not match the path"
          },
          "405": {
            "description": "Link is not editable"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Links an item to a channel.",
        "tags": [
          "links"
        ]
      }
    },
    "/links/{object}": {
      "delete": {
        "operationId": "removeAllLinksForObject",
        "parameters": [
          {
            "description": "item name or thing UID",
            "in": "path",
            "name": "object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Delete all links that refer to an item or thing.",
        "tags": [
          "links"
        ]
      }
    },
    "/logging": {
      "get": {
        "operationId": "getLogger_1",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoggerBean"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get all loggers",
        "tags": [
          "logging"
        ]
      }
    },
    "/logging/{loggerName}": {
      "delete": {
        "operationId": "removeLogger",
        "parameters": [
          {
            "description": "logger name",
            "in": "path",
            "name": "loggerName",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9.]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Remove a single logger.",
        "tags": [
          "logging"
        ]
      },
      "get": {
        "operationId": "getLogger",
        "parameters": [
          {
            "description": "logger name",
            "in": "path",
            "name": "loggerName",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9.]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoggerInfo"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get a single logger.",
        "tags": [
          "logging"
        ]
      },
      "put": {
        "operationId": "putLogger",
        "parameters": [
          {
            "description": "logger name",
            "in": "path",
            "name": "loggerName",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9.]+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoggerInfo"
              }
            }
          },
          "description": "logger",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Payload is invalid."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Modify or add logger",
        "tags": [
          "logging"
        ]
      }
    },
    "/module-types": {
      "get": {
        "operationId": "getModuleTypes",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "tags for filtering",
            "in": "query",
            "name": "tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filtering by action, condition or trigger",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModuleTypeDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get all available module types.",
        "tags": [
          "module-types"
        ]
      }
    },
    "/module-types/{moduleTypeUID}": {
      "get": {
        "operationId": "getModuleTypeById",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "moduleTypeUID",
            "in": "path",
            "name": "moduleTypeUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleTypeDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Module Type corresponding to the given UID does not found."
          }
        },
        "summary": "Gets a module type corresponding to the given UID.",
        "tags": [
          "module-types"
        ]
      }
    },
    "/persistence": {
      "get": {
        "operationId": "getPersistenceServices",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PersistenceServiceDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets a list of persistence services.",
        "tags": [
          "persistence"
        ]
      }
    },
    "/persistence/items": {
      "get": {
        "operationId": "getItemsForPersistenceService",
        "parameters": [
          {
            "description": "Id of the persistence service. If not provided the default service will be used",
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PersistenceItemInfo"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets a list of items available via a specific persistence service.",
        "tags": [
          "persistence"
        ]
      }
    },
    "/persistence/items/{itemname}": {
      "delete": {
        "operationId": "deleteItemFromPersistenceService",
        "parameters": [
          {
            "description": "Id of the persistence service.",
            "in": "query",
            "name": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The item name.",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "Start of the time range to be deleted. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]",
            "in": "query",
            "name": "starttime",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End of the time range to be deleted. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]",
            "in": "query",
            "name": "endtime",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Invalid filter parameters"
          },
          "404": {
            "description": "Unknown persistence service"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Deletes item persistence data from a specific persistence service in a given time range.",
        "tags": [
          "persistence"
        ]
      },
      "get": {
        "operationId": "getItemDataFromPersistenceService",
        "parameters": [
          {
            "description": "Id of the persistence service. If not provided the default service will be used",
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The item name",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "Start time of the data to return. Will default to 1 day before endtime. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]",
            "in": "query",
            "name": "starttime",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End time of the data to return. Will default to current time. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]",
            "in": "query",
            "name": "endtime",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number of data to return. This parameter will enable paging.",
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The length of each page.",
            "in": "query",
            "name": "pagelength",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Gets one value before and after the requested period.",
            "in": "query",
            "name": "boundary",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Adds the current Item state into the requested period (the item state will be before or at the endtime)",
            "in": "query",
            "name": "itemState",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemHistoryDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Unknown Item or persistence service"
          }
        },
        "summary": "Gets item persistence data from the persistence service.",
        "tags": [
          "persistence"
        ]
      },
      "put": {
        "operationId": "storeItemDataInPersistenceService",
        "parameters": [
          {
            "description": "Id of the persistence service. If not provided the default service will be used",
            "in": "query",
            "name": "serviceId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The item name.",
            "in": "path",
            "name": "itemname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "Time of the data to be stored. Will default to current time. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]",
            "in": "query",
            "name": "time",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The state to store.",
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Unknown Item or persistence service"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Stores item persistence data into the persistence service.",
        "tags": [
          "persistence"
        ]
      }
    },
    "/persistence/{serviceId}": {
      "delete": {
        "operationId": "deletePersistenceServiceConfiguration",
        "parameters": [
          {
            "description": "Id of the persistence service.",
            "in": "path",
            "name": "serviceId",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Persistence service configuration not found."
          },
          "405": {
            "description": "Persistence service configuration not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Deletes a persistence service configuration.",
        "tags": [
          "persistence"
        ]
      },
      "get": {
        "operationId": "getPersistenceServiceConfiguration",
        "parameters": [
          {
            "description": "Id of the persistence service.",
            "in": "path",
            "name": "serviceId",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersistenceServiceConfigurationDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Service configuration not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets a persistence service configuration.",
        "tags": [
          "persistence"
        ]
      },
      "put": {
        "operationId": "putPersistenceServiceConfiguration",
        "parameters": [
          {
            "description": "Id of the persistence service.",
            "in": "path",
            "name": "serviceId",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z0-9]+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersistenceServiceConfigurationDTO"
              }
            }
          },
          "description": "service configuration",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersistenceServiceConfigurationDTO"
                }
              }
            },
            "description": "OK"
          },
          "201": {
            "description": "PersistenceServiceConfiguration created."
          },
          "400": {
            "description": "Payload invalid."
          },
          "405": {
            "description": "PersistenceServiceConfiguration not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Sets a persistence service configuration.",
        "tags": [
          "persistence"
        ]
      }
    },
    "/profile-types": {
      "get": {
        "operationId": "getProfileTypes",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "channel type filter",
            "in": "query",
            "name": "channelTypeUID",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "item type filter",
            "in": "query",
            "name": "itemType",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProfileTypeDTO"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets all available profile types.",
        "tags": [
          "profile-types"
        ]
      }
    },
    "/rules": {
      "get": {
        "operationId": "getRules",
        "parameters": [
          {
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "summary fields only",
            "in": "query",
            "name": "summary",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "provides a cacheable list of values not expected to change regularly and honors the If-Modified-Since header, all other parameters are ignored",
            "in": "query",
            "name": "staticDataOnly",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnrichedRuleDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get available rules, optionally filtered by tags and/or prefix.",
        "tags": [
          "rules"
        ]
      },
      "post": {
        "operationId": "createRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleDTO"
              }
            }
          },
          "description": "rule data",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "Newly created Rule",
                "style": "simple"
              }
            }
          },
          "400": {
            "description": "Creation of the rule is refused. Missing required parameter."
          },
          "409": {
            "description": "Creation of the rule is refused. Rule with the same UID already exists."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Creates a rule.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/schedule/simulations": {
      "get": {
        "operationId": "getScheduleRuleSimulations",
        "parameters": [
          {
            "description": "Start time of the simulated rule executions. Will default to the current time. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End time of the simulated rule executions. Will default to 30 days after the start time. Must be less than 180 days after the given start time. [yyyy-MM-dd'T'HH:mm:ss.SSSZ]",
            "in": "query",
            "name": "until",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RuleExecution"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "The max. simulation duration of 180 days is exceeded."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Simulates the executions of rules filtered by tag 'Schedule' within the given times.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{ruleUID}": {
      "delete": {
        "operationId": "deleteRule",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Removes an existing rule corresponding to the given UID.",
        "tags": [
          "rules"
        ]
      },
      "get": {
        "operationId": "getRuleById",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedRuleDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Rule not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets the rule corresponding to the given UID.",
        "tags": [
          "rules"
        ]
      },
      "put": {
        "operationId": "updateRule",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleDTO"
              }
            }
          },
          "description": "rule data",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Updates an existing rule corresponding to the given UID.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{ruleUID}/actions": {
      "get": {
        "operationId": "getRuleActions",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ActionDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets the rule actions.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{ruleUID}/conditions": {
      "get": {
        "operationId": "getRuleConditions",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConditionDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets the rule conditions.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{ruleUID}/config": {
      "get": {
        "operationId": "getRuleConfiguration",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets the rule configuration values.",
        "tags": [
          "rules"
        ]
      },
      "put": {
        "operationId": "updateRuleConfiguration",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "object"
                },
                "type": "object"
              }
            }
          },
          "description": "config"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Sets the rule configuration values.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{ruleUID}/enable": {
      "post": {
        "operationId": "enableRule",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "enable",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Sets the rule enabled status.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{ruleUID}/runnow": {
      "post": {
        "operationId": "runRuleNow_1",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "object"
                },
                "type": "object"
              }
            }
          },
          "description": "the context for running this rule"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Executes actions of the rule.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{ruleUID}/triggers": {
      "get": {
        "operationId": "getRuleTriggers",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TriggerDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets the rule triggers.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{ruleUID}/{moduleCategory}/{id}": {
      "get": {
        "operationId": "getRuleModuleById",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "moduleCategory",
            "in": "path",
            "name": "moduleCategory",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found or does not have a module with such Category and ID."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets the rule's module corresponding to the given Category and ID.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{ruleUID}/{moduleCategory}/{id}/config": {
      "get": {
        "operationId": "getRuleModuleConfig",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "moduleCategory",
            "in": "path",
            "name": "moduleCategory",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found or does not have a module with such Category and ID."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets the module's configuration.",
        "tags": [
          "rules"
        ]
      }
    },
    "/rules/{ruleUID}/{moduleCategory}/{id}/config/{param}": {
      "get": {
        "operationId": "getRuleModuleConfigParameter",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "moduleCategory",
            "in": "path",
            "name": "moduleCategory",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "param",
            "in": "path",
            "name": "param",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found or does not have a module with such Category and ID."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets the module's configuration parameter.",
        "tags": [
          "rules"
        ]
      },
      "put": {
        "operationId": "setRuleModuleConfigParameter",
        "parameters": [
          {
            "description": "ruleUID",
            "in": "path",
            "name": "ruleUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "moduleCategory",
            "in": "path",
            "name": "moduleCategory",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "param",
            "in": "path",
            "name": "param",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "value",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Rule corresponding to the given UID does not found or does not have a module with such Category and ID."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Sets the module's configuration parameter value.",
        "tags": [
          "rules"
        ]
      }
    },
    "/services": {
      "get": {
        "operationId": "getServices",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConfigurableServiceDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get all configurable services.",
        "tags": [
          "services"
        ]
      }
    },
    "/services/{serviceId}": {
      "get": {
        "operationId": "getServicesById",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "service ID",
            "in": "path",
            "name": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurableServiceDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get configurable service for given service ID.",
        "tags": [
          "services"
        ]
      }
    },
    "/services/{serviceId}/config": {
      "delete": {
        "operationId": "deleteServiceConfig",
        "parameters": [
          {
            "description": "service ID",
            "in": "path",
            "name": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "No old configuration"
          },
          "500": {
            "description": "Configuration can not be deleted due to internal error"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Deletes a service configuration for given service ID and returns the old configuration.",
        "tags": [
          "services"
        ]
      },
      "get": {
        "operationId": "getServiceConfig",
        "parameters": [
          {
            "description": "service ID",
            "in": "path",
            "name": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "500": {
            "description": "Configuration can not be read due to internal error"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get service configuration for given service ID.",
        "tags": [
          "services"
        ]
      },
      "put": {
        "operationId": "updateServiceConfig",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "service ID",
            "in": "path",
            "name": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "object"
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "No old configuration"
          },
          "500": {
            "description": "Configuration can not be updated due to internal error"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Updates a service configuration for given service ID and returns the old configuration.",
        "tags": [
          "services"
        ]
      }
    },
    "/services/{serviceId}/contexts": {
      "get": {
        "operationId": "getServiceContext",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "service ID",
            "in": "path",
            "name": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConfigurableServiceDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get existing multiple context service configurations for the given factory PID.",
        "tags": [
          "services"
        ]
      }
    },
    "/sitemaps": {
      "get": {
        "operationId": "getSitemaps",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SitemapDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get all available sitemaps.",
        "tags": [
          "sitemaps"
        ]
      }
    },
    "/sitemaps/events/subscribe": {
      "post": {
        "operationId": "createSitemapEventSubscription",
        "responses": {
          "201": {
            "description": "Subscription created."
          },
          "503": {
            "description": "Subscriptions limit reached."
          }
        },
        "summary": "Creates a sitemap event subscription.",
        "tags": [
          "sitemaps"
        ]
      }
    },
    "/sitemaps/events/{subscriptionid}": {
      "get": {
        "operationId": "getSitemapEvents_1",
        "parameters": [
          {
            "description": "subscription id",
            "in": "path",
            "name": "subscriptionid",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9-]+",
              "type": "string"
            }
          },
          {
            "description": "sitemap name",
            "in": "query",
            "name": "sitemap",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "page id",
            "in": "query",
            "name": "pageid",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Missing sitemap or page parameter, or page not linked successfully to the subscription."
          },
          "404": {
            "description": "Subscription not found."
          }
        },
        "summary": "Get sitemap events.",
        "tags": [
          "sitemaps"
        ]
      }
    },
    "/sitemaps/events/{subscriptionid}/*": {
      "get": {
        "operationId": "getSitemapEvents",
        "parameters": [
          {
            "description": "subscription id",
            "in": "path",
            "name": "subscriptionid",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9-]+",
              "type": "string"
            }
          },
          {
            "description": "sitemap name",
            "in": "query",
            "name": "sitemap",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Missing sitemap parameter, or sitemap not linked successfully to the subscription."
          },
          "404": {
            "description": "Subscription not found."
          }
        },
        "summary": "Get sitemap events for a whole sitemap. Not recommended due to potentially high traffic.",
        "tags": [
          "sitemaps"
        ]
      }
    },
    "/sitemaps/{sitemapname}": {
      "get": {
        "operationId": "getSitemapByName",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "sitemap name",
            "in": "path",
            "name": "sitemapname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "jsoncallback",
            "schema": {
              "default": "callback",
              "type": "string"
            }
          },
          {
            "description": "include hidden widgets",
            "in": "query",
            "name": "includeHidden",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SitemapDTO"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get sitemap by name.",
        "tags": [
          "sitemaps"
        ]
      }
    },
    "/sitemaps/{sitemapname}/*": {
      "get": {
        "operationId": "pollDataForSitemap",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "sitemap name",
            "in": "path",
            "name": "sitemapname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "subscriptionid",
            "in": "query",
            "name": "subscriptionid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "include hidden widgets",
            "in": "query",
            "name": "includeHidden",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SitemapDTO"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Invalid subscription id has been provided."
          },
          "404": {
            "description": "Sitemap with requested name does not exist"
          }
        },
        "summary": "Polls the data for a whole sitemap. Not recommended due to potentially high traffic.",
        "tags": [
          "sitemaps"
        ]
      }
    },
    "/sitemaps/{sitemapname}/{pageid}": {
      "get": {
        "operationId": "pollDataForPage",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "sitemap name",
            "in": "path",
            "name": "sitemapname",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "page id",
            "in": "path",
            "name": "pageid",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          },
          {
            "description": "subscriptionid",
            "in": "query",
            "name": "subscriptionid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "include hidden widgets",
            "in": "query",
            "name": "includeHidden",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageDTO"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Invalid subscription id has been provided."
          },
          "404": {
            "description": "Sitemap with requested name does not exist or page does not exist, or page refers to a non-linkable widget"
          }
        },
        "summary": "Polls the data for one page of a sitemap.",
        "tags": [
          "sitemaps"
        ]
      }
    },
    "/systeminfo": {
      "get": {
        "operationId": "getSystemInformation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfoBean"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets information about the system.",
        "tags": [
          "systeminfo"
        ]
      }
    },
    "/systeminfo/uom": {
      "get": {
        "operationId": "getUoMInformation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UoMInfoBean"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get all supported dimensions and their system units.",
        "tags": [
          "systeminfo"
        ]
      }
    },
    "/tags": {
      "get": {
        "operationId": "getSemanticTags",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnrichedSemanticTagDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get all available semantic tags.",
        "tags": [
          "tags"
        ]
      },
      "post": {
        "operationId": "createSemanticTag",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrichedSemanticTagDTO"
              }
            }
          },
          "description": "tag data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedSemanticTagDTO"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "description": "The tag identifier is invalid or the tag label is missing."
          },
          "409": {
            "description": "A tag with the same identifier already exists."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Creates a new semantic tag and adds it to the registry.",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{tagId}": {
      "delete": {
        "operationId": "removeSemanticTag",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "tag id",
            "in": "path",
            "name": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK, was deleted."
          },
          "404": {
            "description": "Semantic tag not found."
          },
          "405": {
            "description": "Semantic tag not removable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Removes a semantic tag and its sub tags from the registry.",
        "tags": [
          "tags"
        ]
      },
      "get": {
        "operationId": "getSemanticTagAndSubTags",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "tag id",
            "in": "path",
            "name": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnrichedSemanticTagDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Semantic tag not found."
          }
        },
        "summary": "Gets a semantic tag and its sub tags.",
        "tags": [
          "tags"
        ]
      },
      "put": {
        "operationId": "updateSemanticTag",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "tag id",
            "in": "path",
            "name": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnrichedSemanticTagDTO"
              }
            }
          },
          "description": "tag data",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedSemanticTagDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Semantic tag not found."
          },
          "405": {
            "description": "Semantic tag not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Updates a semantic tag.",
        "tags": [
          "tags"
        ]
      }
    },
    "/templates": {
      "get": {
        "operationId": "getTemplates",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Template"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get all available templates.",
        "tags": [
          "templates"
        ]
      }
    },
    "/templates/{templateUID}": {
      "get": {
        "operationId": "getTemplateById",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "templateUID",
            "in": "path",
            "name": "templateUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Template corresponding to the given UID does not found."
          }
        },
        "summary": "Gets a template corresponding to the given UID.",
        "tags": [
          "templates"
        ]
      }
    },
    "/thing-types": {
      "get": {
        "operationId": "getThingTypes",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter by binding Id",
            "in": "query",
            "name": "bindingId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/StrippedThingTypeDTO"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Gets all available thing types without config description, channels and properties.",
        "tags": [
          "thing-types"
        ]
      }
    },
    "/thing-types/{thingTypeUID}": {
      "get": {
        "operationId": "getThingTypeById",
        "parameters": [
          {
            "description": "thingTypeUID",
            "in": "path",
            "name": "thingTypeUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThingTypeDTO"
                }
              }
            },
            "description": "Thing type with provided thingTypeUID does not exist."
          },
          "404": {
            "description": "No content"
          }
        },
        "summary": "Gets thing type by UID.",
        "tags": [
          "thing-types"
        ]
      }
    },
    "/things": {
      "get": {
        "operationId": "getThings",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "summary fields only",
            "in": "query",
            "name": "summary",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "provides a cacheable list of values not expected to change regularly and checks the If-Modified-Since header",
            "in": "query",
            "name": "staticDataOnly",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnrichedThingDTO"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get all available things.",
        "tags": [
          "things"
        ]
      },
      "post": {
        "operationId": "createThingInRegistry",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThingDTO"
              }
            }
          },
          "description": "thing data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedThingDTO"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "description": "A uid must be provided, if no binding can create a thing of this type."
          },
          "409": {
            "description": "A thing with the same uid already exists."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Creates a new thing and adds it to the registry.",
        "tags": [
          "things"
        ]
      }
    },
    "/things/{thingUID}": {
      "delete": {
        "operationId": "removeThingById",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "thingUID",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "force",
            "in": "query",
            "name": "force",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK, was deleted."
          },
          "202": {
            "description": "ACCEPTED for asynchronous deletion."
          },
          "404": {
            "description": "Thing not found."
          },
          "409": {
            "description": "Thing could not be deleted because it's not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Removes a thing from the registry. Set 'force' to __true__ if you want the thing to be removed immediately.",
        "tags": [
          "things"
        ]
      },
      "get": {
        "operationId": "getThingById",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "thingUID",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedThingDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Thing not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets thing by UID.",
        "tags": [
          "things"
        ]
      },
      "put": {
        "operationId": "updateThing",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "thingUID",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThingDTO"
              }
            }
          },
          "description": "thing",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedThingDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Thing not found."
          },
          "409": {
            "description": "Thing could not be updated as it is not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Updates a thing.",
        "tags": [
          "things"
        ]
      }
    },
    "/things/{thingUID}/config": {
      "put": {
        "operationId": "updateThingConfig",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "thing",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "object"
                },
                "type": "object"
              }
            }
          },
          "description": "configuration parameters"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedThingDTO"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Configuration of the thing is not valid."
          },
          "404": {
            "description": "Thing not found"
          },
          "409": {
            "description": "Thing could not be updated as it is not editable."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Updates thing's configuration.",
        "tags": [
          "things"
        ]
      }
    },
    "/things/{thingUID}/config/status": {
      "get": {
        "operationId": "getThingConfigStatus",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "thing",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConfigStatusMessage"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Thing not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets thing config status.",
        "tags": [
          "things"
        ]
      }
    },
    "/things/{thingUID}/enable": {
      "put": {
        "operationId": "enableThing",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "thing",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "enabled"
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichedThingDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Thing not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Sets the thing enabled status.",
        "tags": [
          "things"
        ]
      }
    },
    "/things/{thingUID}/firmware/status": {
      "get": {
        "operationId": "getThingFirmwareStatus",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "thing",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FirmwareStatusDTO"
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "No firmware status provided by this Thing."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets thing's firmware status.",
        "tags": [
          "things"
        ]
      }
    },
    "/things/{thingUID}/firmware/{firmwareVersion}": {
      "put": {
        "operationId": "updateThingFirmware",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "thing",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "version",
            "in": "path",
            "name": "firmwareVersion",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Firmware update preconditions not satisfied."
          },
          "404": {
            "description": "Thing not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Update thing firmware.",
        "tags": [
          "things"
        ]
      }
    },
    "/things/{thingUID}/firmwares": {
      "get": {
        "operationId": "getAvailableFirmwaresForThing",
        "parameters": [
          {
            "description": "thingUID",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FirmwareDTO"
                  },
                  "type": "array",
                  "uniqueItems": true
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "No firmwares found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get all available firmwares for provided thing UID",
        "tags": [
          "things"
        ]
      }
    },
    "/things/{thingUID}/status": {
      "get": {
        "operationId": "getThingStatus",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "thing",
            "in": "path",
            "name": "thingUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThingStatusInfo"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Thing not found."
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Gets thing status.",
        "tags": [
          "things"
        ]
      }
    },
    "/transformations": {
      "get": {
        "operationId": "getTransformations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TransformationDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get a list of all transformations",
        "tags": [
          "transformations"
        ]
      }
    },
    "/transformations/services": {
      "get": {
        "operationId": "getTransformationServices",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get all transformation services",
        "tags": [
          "transformations"
        ]
      }
    },
    "/transformations/{uid}": {
      "delete": {
        "operationId": "deleteTransformation",
        "parameters": [
          {
            "description": "Transformation UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "UID not found"
          },
          "405": {
            "description": "Transformation not editable"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get a single transformation",
        "tags": [
          "transformations"
        ]
      },
      "get": {
        "operationId": "getTransformation",
        "parameters": [
          {
            "description": "Transformation UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transformation"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Get a single transformation",
        "tags": [
          "transformations"
        ]
      },
      "put": {
        "operationId": "putTransformation",
        "parameters": [
          {
            "description": "Transformation UID",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransformationDTO"
              }
            }
          },
          "description": "transformation",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request (content missing or invalid)"
          },
          "405": {
            "description": "Transformation not editable"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Put a single transformation",
        "tags": [
          "transformations"
        ]
      }
    },
    "/ui/components/{namespace}": {
      "get": {
        "operationId": "getRegisteredUIComponentsInNamespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "summary fields only",
            "in": "query",
            "name": "summary",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RootUIComponent"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get all registered UI components in the specified namespace.",
        "tags": [
          "ui"
        ]
      },
      "post": {
        "operationId": "addUIComponentToNamespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RootUIComponent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootUIComponent"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Add a UI component in the specified namespace.",
        "tags": [
          "ui"
        ]
      }
    },
    "/ui/components/{namespace}/{componentUID}": {
      "delete": {
        "operationId": "removeUIComponentFromNamespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "componentUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Component not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Remove a specific UI component in the specified namespace.",
        "tags": [
          "ui"
        ]
      },
      "get": {
        "operationId": "getUIComponentInNamespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "componentUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootUIComponent"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Component not found"
          }
        },
        "summary": "Get a specific UI component in the specified namespace.",
        "tags": [
          "ui"
        ]
      },
      "put": {
        "operationId": "updateUIComponentInNamespace",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "componentUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RootUIComponent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootUIComponent"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Component not found"
          }
        },
        "security": [
          {
            "basicAuth": [],"oauth2": [
              "admin"
            ]
          }
        ],
        "summary": "Update a specific UI component in the specified namespace.",
        "tags": [
          "ui"
        ]
      }
    },
    "/ui/tiles": {
      "get": {
        "operationId": "getUITiles",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TileDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get all registered UI tiles.",
        "tags": [
          "ui"
        ]
      }
    },
    "/uuid": {
      "get": {
        "operationId": "getUUID",
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "A unified unique id.",
        "tags": [
          "uuid"
        ]
      }
    },
    "/voice/defaultvoice": {
      "get": {
        "operationId": "getDefaultVoice",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceDTO"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "No default voice was found."
          }
        },
        "summary": "Gets the default voice.",
        "tags": [
          "voice"
        ]
      }
    },
    "/voice/dialog/start": {
      "post": {
        "operationId": "startDialog",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "source ID",
            "in": "query",
            "name": "sourceId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "keywork spotter ID",
            "in": "query",
            "name": "ksId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Speech-to-Text ID",
            "in": "query",
            "name": "sttId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Text-to-Speech ID",
            "in": "query",
            "name": "ttsId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "voice ID",
            "in": "query",
            "name": "voiceId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "comma separated list of interpreter IDs",
            "in": "query",
            "name": "hliIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "audio sink ID",
            "in": "query",
            "name": "sinkId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "keyword",
            "in": "query",
            "name": "keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "listening item",
            "in": "query",
            "name": "listeningItem",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Services are missing or language is not supported by services or dialog processing is already started for the audio source."
          },
          "404": {
            "description": "One of the given ids is wrong."
          }
        },
        "summary": "Start dialog processing for a given audio source.",
        "tags": [
          "voice"
        ]
      }
    },
    "/voice/dialog/stop": {
      "post": {
        "operationId": "stopDialog",
        "parameters": [
          {
            "description": "source ID",
            "in": "query",
            "name": "sourceId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "No dialog processing is started for the audio source."
          },
          "404": {
            "description": "No audio source was found."
          }
        },
        "summary": "Stop dialog processing for a given audio source.",
        "tags": [
          "voice"
        ]
      }
    },
    "/voice/interpreters": {
      "get": {
        "operationId": "getVoiceInterpreters",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HumanLanguageInterpreterDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get the list of all interpreters.",
        "tags": [
          "voice"
        ]
      },
      "post": {
        "operationId": "interpretTextByDefaultInterpreter",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "text to interpret",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "interpretation exception occurs"
          },
          "404": {
            "description": "No human language interpreter was found."
          }
        },
        "summary": "Sends a text to the default human language interpreter.",
        "tags": [
          "voice"
        ]
      }
    },
    "/voice/interpreters/{ids}": {
      "post": {
        "operationId": "interpretText",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "comma separated list of interpreter ids",
            "in": "path",
            "name": "ids",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "text to interpret",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "interpretation exception occurs"
          },
          "404": {
            "description": "No human language interpreter was found."
          }
        },
        "summary": "Sends a text to a given human language interpreter(s).",
        "tags": [
          "voice"
        ]
      }
    },
    "/voice/interpreters/{id}": {
      "get": {
        "operationId": "getVoiceInterpreterByUID",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "interpreter id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "pattern": "[a-zA-Z_0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HumanLanguageInterpreterDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "description": "Interpreter not found"
          }
        },
        "summary": "Gets a single interpreter.",
        "tags": [
          "voice"
        ]
      }
    },
    "/voice/listenandanswer": {
      "post": {
        "operationId": "listenAndAnswer",
        "parameters": [
          {
            "description": "language",
            "in": "header",
            "name": "Accept-Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "source ID",
            "in": "query",
            "name": "sourceId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Speech-to-Text ID",
            "in": "query",
            "name": "sttId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Text-to-Speech ID",
            "in": "query",
            "name": "ttsId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "voice ID",
            "in": "query",
            "name": "voiceId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "interpreter IDs",
            "in": "query",
            "name": "hliIds",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "audio sink ID",
            "in": "query",
            "name": "sinkId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "listening item",
            "in": "query",
            "name": "listeningItem",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Services are missing or language is not supported by services or dialog processing is already started for the audio source."
          },
          "404": {
            "description": "One of the given ids is wrong."
          }
        },
        "summary": "Executes a simple dialog sequence without keyword spotting for a given audio source.",
        "tags": [
          "voice"
        ]
      }
    },
    "/voice/say": {
      "post": {
        "operationId": "textToSpeech",
        "parameters": [
          {
            "description": "voice id",
            "in": "query",
            "name": "voiceid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "audio sink id",
            "in": "query",
            "name": "sinkid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "volume level",
            "in": "query",
            "name": "volume",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "text to speak",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Speaks a given text with a given voice through the given audio sink.",
        "tags": [
          "voice"
        ]
      }
    },
    "/voice/voices": {
      "get": {
        "operationId": "getVoices",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VoiceDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get the list of all voices.",
        "tags": [
          "voice"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "/rest"
    }
  ]
}