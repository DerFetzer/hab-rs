[config]
default_to_workspace = false

[env]
CARGO_MAKE_RUN_CHECK_FORMAT = true
CARGO_MAKE_RUN_CLIPPY = true
CARGO_MAKE_CLIPPY_ARGS = "--package hab-rs --no-deps -- -D warnings"

[tasks.clippy-ci-flow]
condition = { env_set = ["CARGO_MAKE_RUN_CLIPPY"] }
[tasks.check-format-ci-flow]
condition = { env_set = ["CARGO_MAKE_RUN_CHECK_FORMAT"] }

[tasks.clean-api-client]
script_runner = "@shell"
script = '''
rm -rf ./hab-rs-api-client/*
'''

[tasks.preprocess-openapi]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! serde_json = "*"
//! regex = "*"
//! ```
fn main() -> Result<(), Box<dyn std::error::Error>> {
    let openapi_json = std::fs::read_to_string("res/openhab_api_spec.json")?;
    let mut openapi_value: serde_json::Value = serde_json::from_str(&openapi_json)?;

    let security_schemes = openapi_value.get_mut("components").unwrap().get_mut("securitySchemes").unwrap();

    let basic_auth = serde_json::json!({
        "type": "http",
        "scheme": "basic",
    });
    security_schemes.as_object_mut().unwrap().insert("basicAuth".to_string(), basic_auth);

    let openapi_preprocessed = serde_json::to_string_pretty(&openapi_value)?;

    let sec_re = regex::Regex::new(r#"(?m)"security": \[\s*\{\s*"#).unwrap();
    let openapi_preprocessed = sec_re.replace_all(&openapi_preprocessed, r#"$0"basicAuth": [],"#).to_string();

    std::fs::write("res/openhab_api_spec_pre.json", &openapi_preprocessed)?;
    Ok(())
}
'''

[tasks.fix-api-client]
script_runner = "@duckscript"
script = """
voice_api = readfile "hab-rs-api-client/src/apis/voice_api.rs"
voice_api = replace ${voice_api} ".as_ref()" ""
writefile "hab-rs-api-client/src/apis/voice_api.rs" ${voice_api}
""" 
dependencies = ["generate-api-client"]

[tasks.copy-features]
script_runner = "@duckscript"
script = """
api_cargo_toml = readfile "hab-rs-api-client/Cargo.toml"
cargo_toml = readfile "Cargo.toml"
cargo_toml_features_start = last_indexof ${cargo_toml} "# Api features" 

cargo_toml = substring ${cargo_toml} 0 ${cargo_toml_features_start}

api_features_start = last_indexof ${api_cargo_toml} "# Api features"
api_features = substring ${api_cargo_toml} ${api_features_start}
api_features = replace ${api_features} "# " ""

cargo_toml = concat  ${cargo_toml} "# " ${api_features}
 
writefile "Cargo.toml" ${cargo_toml}
""" 
dependencies = ["generate-api-client"]

[tasks.generate-api-client]
command = "openapi-generator"
args =[
    "generate", 
    "-i", "res/openhab_api_spec_pre.json",
    "-g", "rust",
    "-c", "res/openapi_generator_config.yaml",
    "-p", "packageName=hab-rs-api-client,library=reqwest-trait,bestFitInt=true,mockall=true,preferUnsignedInt=true,supportMiddleware=true,topLevelApiClient=true",
    "-o", "hab-rs-api-client"
]
dependencies = ["clean-api-client", "preprocess-openapi"]

[tasks.refresh-api-client]
dependencies = ["generate-api-client", "fix-api-client", "copy-features", "format"]
